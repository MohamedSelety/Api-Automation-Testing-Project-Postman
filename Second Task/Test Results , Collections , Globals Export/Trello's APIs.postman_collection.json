{
	"info": {
		"_postman_id": "63f8d55c-e096-4a12-a45c-239907702519",
		"name": "Trello's APIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24721847"
	},
	"item": [
		{
			"name": "Boards",
			"item": [
				{
					"name": "Create a board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"name Test\", function(){\r",
									"pm.expect(pm.response.json().name).to.equal(\"User New Board\")\r",
									"\r",
									"})\r",
									"pm.test(\"can invite Test\", function(){\r",
									"pm.expect(pm.response.json().prefs.permissionLevel).to.equal(\"private\")\r",
									"\r",
									"})\r",
									"pm.test(\"isClosed Test\", function(){\r",
									"pm.expect(pm.response.json().closed).to.equal(false)\r",
									"\r",
									"})\r",
									"pm.test(\"can be public Test\", function(){\r",
									"pm.expect(pm.response.json().prefs.canBePublic).to.equal(true)\r",
									"\r",
									"})\r",
									"pm.test(\"can invite Test\", function(){\r",
									"pm.expect(pm.response.json().prefs.canInvite).to.equal(true)\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/?name=User New Board&key={{key}}&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "User New Board"
								},
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Boards",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Boards number Test\", function(){\r",
									"pm.expect(pm.response.json().boards.length).to.above(1)\r",
									"\r",
									"})\r",
									"\r",
									"pm.collectionVariables.set(\"FirstBoardidValue\", pm.response.json().boards[0].id);\r",
									"var length =  pm.response.json().boards.length-1\r",
									"pm.collectionVariables.set(\"LastBoaredidValue\", pm.response.json().boards[length].id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/members/me?boards=open&key={{key}}&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"members",
								"me"
							],
							"query": [
								{
									"key": "boards",
									"value": "open"
								},
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function(){\r",
									"pm.expect(pm.response.status).to.equal(\"OK\")\r",
									"\r",
									"})\r",
									"pm.test(\"Body test\", function(){\r",
									"pm.expect(pm.response.json()._value).to.equal(null)\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/{{LastBoaredidValue}}?key={{key}}&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								"{{LastBoaredidValue}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Lists on a Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Boards number Test\", function(){\r",
									"pm.expect(pm.response.json().length).to.equal(3)\r",
									"\r",
									"})\r",
									"pm.collectionVariables.set(\"FirstListIDValue\", pm.response.json()[0].id);\r",
									"var listLen = pm.response.json().length-1\r",
									"pm.collectionVariables.set(\"LastListIDValue\",pm.response.json()[listLen].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/{{FirstBoardidValue}}/lists?key={{key}}&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								"{{FirstBoardidValue}}",
								"lists"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Lists",
			"item": [
				{
					"name": "Create a new List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"id exsistance test \", function(){\r",
									"\r",
									"    pm.expect(pm.response.json()).to.have.property(\"id\")\r",
									"})\r",
									"pm.test(\"name exsistance test \", function(){\r",
									"\r",
									"    pm.expect(pm.response.json()).to.have.property(\"name\")\r",
									"})\r",
									"pm.test(\"idBoard exsistance test \", function(){\r",
									"\r",
									"    pm.expect(pm.response.json()).to.have.property(\"idBoard\")\r",
									"})\r",
									"pm.test(\"closed value test \", function(){\r",
									"\r",
									"    pm.expect(pm.response.json().closed).to.equal(false)\r",
									"})\r",
									"pm.test(\"limits value  test \", function(){\r",
									"\r",
									"    pm.expect(pm.response.json().limits).to.include({})\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/lists?name=New List&idBoard={{FirstBoardidValue}}&key={{key}}&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"lists"
							],
							"query": [
								{
									"key": "name",
									"value": "New List"
								},
								{
									"key": "idBoard",
									"value": "{{FirstBoardidValue}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Archive or Unarchive a list",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/lists/{{FirstBoardidValue}}/closed?key={{key}}&token={{token}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"lists",
								"{{FirstBoardidValue}}",
								"closed"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "FirstBoardidValue",
			"value": "",
			"type": "string"
		},
		{
			"key": "LastBoaredidValue",
			"value": "",
			"type": "string"
		},
		{
			"key": "FirstListIDValue",
			"value": "",
			"type": "string"
		},
		{
			"key": "LastListIDValue",
			"value": "",
			"type": "string"
		}
	]
}